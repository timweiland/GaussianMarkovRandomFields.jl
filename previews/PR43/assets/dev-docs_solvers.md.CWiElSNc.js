import{_ as e,c as i,o as n,aA as s}from"./chunks/framework.C2FVNjoP.js";const v=JSON.parse('{"title":"LinearSolve.jl Integration","description":"","frontmatter":{},"headers":[],"relativePath":"dev-docs/solvers.md","filePath":"dev-docs/solvers.md","lastUpdated":null}'),t={name:"dev-docs/solvers.md"};function l(o,a,r,p,d,c){return n(),i("div",null,[...a[0]||(a[0]=[s(`<h1 id="LinearSolve.jl-Integration" tabindex="-1">LinearSolve.jl Integration <a class="header-anchor" href="#LinearSolve.jl-Integration" aria-label="Permalink to &quot;LinearSolve.jl Integration {#LinearSolve.jl-Integration}&quot;">​</a></h1><h2 id="Overview" tabindex="-1">Overview <a class="header-anchor" href="#Overview" aria-label="Permalink to &quot;Overview {#Overview}&quot;">​</a></h2><p>GaussianMarkovRandomFields.jl uses LinearSolve.jl as the backend for all linear algebra operations. This provides access to a wide range of solvers and preconditioners while maintaining a unified interface.</p><h2 id="Key-Components" tabindex="-1">Key Components <a class="header-anchor" href="#Key-Components" aria-label="Permalink to &quot;Key Components {#Key-Components}&quot;">​</a></h2><p>The LinearSolve.jl integration provides several specialized modules:</p><ul><li><p><strong>Selected Inversion</strong>: Efficient computation of diagonal elements of matrix inverses</p></li><li><p><strong>Backward Solve</strong>: Specialized solve operations for GMRF computations</p></li><li><p><strong>Log Determinant</strong>: Efficient computation of log determinants for sparse matrices</p></li><li><p><strong>RBMC</strong>: Rao-Blackwellized Monte Carlo for marginal variance estimation</p></li></ul><h2 id="RBMC-Fallback" tabindex="-1">RBMC Fallback <a class="header-anchor" href="#RBMC-Fallback" aria-label="Permalink to &quot;RBMC Fallback {#RBMC-Fallback}&quot;">​</a></h2><p>When selected inversion is not available for a particular algorithm, the package automatically falls back to RBMC (Rao-Blackwellized Monte Carlo) for computing marginal variances:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># RBMC automatically used when selected inversion unavailable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">variance_vec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gmrf)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses RBMC if needed</span></span></code></pre></div>`,9)])])}const g=e(t,[["render",l]]);export{v as __pageData,g as default};
