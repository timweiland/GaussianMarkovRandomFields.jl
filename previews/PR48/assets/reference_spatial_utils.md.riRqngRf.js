import{_ as o,C as r,c as d,o as p,aA as t,j as e,G as n,a as s,w as l}from"./chunks/framework.DXqF1RZu.js";const f=JSON.parse('{"title":"Spatial Utilities","description":"","frontmatter":{},"headers":[],"relativePath":"reference/spatial_utils.md","filePath":"reference/spatial_utils.md","lastUpdated":null}'),c={name:"reference/spatial_utils.md"},h={class:"jldocstring custom-block",open:""};function u(k,i,g,y,m,E){const a=r("Badge");return p(),d("div",null,[i[6]||(i[6]=t(`<h1 id="Spatial-Utilities" tabindex="-1">Spatial Utilities <a class="header-anchor" href="#Spatial-Utilities" aria-label="Permalink to &quot;Spatial Utilities {#Spatial-Utilities}&quot;">​</a></h1><p>Helpers for constructing spatial structures frequently used in latent models.</p><h2 id="Contiguity-Adjacency-from-Polygons" tabindex="-1">Contiguity Adjacency from Polygons <a class="header-anchor" href="#Contiguity-Adjacency-from-Polygons" aria-label="Permalink to &quot;Contiguity Adjacency from Polygons {#Contiguity-Adjacency-from-Polygons}&quot;">​</a></h2><p>Build a binary adjacency matrix for polygon features using queen contiguity (shared boundary point). Accepts either a vector of geometries or a LibGEOS <code>GeometryCollection</code>. A Shapefile convenience method is provided via package extension. It requires you to load Shapefile.jl first.</p><h3 id="Example" tabindex="-1">Example <a class="header-anchor" href="#Example" aria-label="Permalink to &quot;Example {#Example}&quot;">​</a></h3><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GaussianMarkovRandomFields, LibGEOS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readgeom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POLYGON((0 0,1 0,1 1,0 1,0 0))&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readgeom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POLYGON((1 0,2 0,2 1,1 1,1 0))&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">W  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> contiguity_adjacency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([g1, g2])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2×2 symmetric, ones off-diagonal</span></span></code></pre></div>`,6)),e("details",h,[e("summary",null,[i[0]||(i[0]=e("a",{id:"GaussianMarkovRandomFields.contiguity_adjacency",href:"#GaussianMarkovRandomFields.contiguity_adjacency"},[e("span",{class:"jlbinding"},"GaussianMarkovRandomFields.contiguity_adjacency")],-1)),i[1]||(i[1]=s()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[4]||(i[4]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contiguity_adjacency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geoms; rule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :queen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Build a binary contiguity adjacency matrix <code>W</code> for polygonal geometries.</p><ul><li><p><code>geoms</code>: Vector of geometries. Accepts <code>LibGEOS.Geometry</code> or GeoInterface-compatible objects that LibGEOS can wrap via <code>LibGEOS.Geometry(geom)</code>.</p></li><li><p><code>rule</code>: Contiguity definition. Currently supports <code>:queen</code> (share any boundary point).</p></li></ul><p>Returns a sparse, symmetric <code>SparseMatrixCSC{Float64,Int}</code> with zero diagonal, where <code>W[i,j] = 1.0</code> iff areas i and j are contiguous under the chosen rule.</p><p>Notes</p><ul><li><p>Complexity is O(n²) over the number of polygons. For large <code>n</code>, consider spatial indexing or pre-filtering by bounding boxes before calling this utility.</p></li><li><p>Rook contiguity (shared edge only) can be added later; <code>:queen</code> covers most use cases.</p></li></ul>',6)),n(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[2]||(i[2]=[e("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b8b5c44d5326c11a629c9c8e96dbb84bd231225f/src/utils/adjacency.jl#L6-L22",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),i[5]||(i[5]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contiguity_adjacency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LibGEOS.GeometryCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; rule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :queen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Build contiguity adjacency from a LibGEOS <code>GeometryCollection</code> by extracting its member geometries via <code>LibGEOS.getGeometries(gc)</code> and delegating to <code>contiguity_adjacency(::Vector)</code>.</p>',2)),n(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[3]||(i[3]=[e("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b8b5c44d5326c11a629c9c8e96dbb84bd231225f/src/utils/adjacency.jl#L56-L62",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i[7]||(i[7]=e("h2",{id:"See-Also",tabindex:"-1"},[s("See Also "),e("a",{class:"header-anchor",href:"#See-Also","aria-label":'Permalink to "See Also {#See-Also}"'},"​")],-1)),i[8]||(i[8]=e("ul",null,[e("li",null,[s("The BYM + fixed effects Poisson tutorial uses this to build "),e("code",null,"W"),s(" from a shapefile: "),e("a",{href:"/GaussianMarkovRandomFields.jl/previews/PR48/tutorials/bym_scotland_lip_cancer#Advanced-GMRF-modelling-for-disease-mapping"},"Advanced GMRF modelling for disease mapping")])],-1))])}const _=o(c,[["render",u]]);export{f as __pageData,_ as default};
