import{_ as p,C as h,c as k,o,aA as l,j as i,G as n,a as t,w as e}from"./chunks/framework.YkF_Stjf.js";const W=JSON.parse('{"title":"Observation Models","description":"","frontmatter":{},"headers":[],"relativePath":"reference/observation_models.md","filePath":"reference/observation_models.md","lastUpdated":null}'),r={name:"reference/observation_models.md"},d={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""};function q(z,s,H,U,$,Z){const a=h("Badge");return o(),k("div",null,[s[132]||(s[132]=l(`<h1 id="Observation-Models" tabindex="-1">Observation Models <a class="header-anchor" href="#Observation-Models" aria-label="Permalink to &quot;Observation Models {#Observation-Models}&quot;">​</a></h1><p>Observation models define the relationship between observations <code>y</code> and the latent GMRF field <code>x</code>, typically through likelihood functions. They enable Bayesian inference by connecting your data to the underlying Gaussian process through flexible probabilistic models.</p><p>GaussianMarkovRandomFields.jl implements observation models using a <strong>factory pattern</strong> that separates model configuration from materialized evaluation instances. This design provides major performance benefits in optimization loops and cleaner automatic differentiation boundaries.</p><h2 id="Core-Concepts" tabindex="-1">Core Concepts <a class="header-anchor" href="#Core-Concepts" aria-label="Permalink to &quot;Core Concepts {#Core-Concepts}&quot;">​</a></h2><h3 id="The-Factory-Pattern" tabindex="-1">The Factory Pattern <a class="header-anchor" href="#The-Factory-Pattern" aria-label="Permalink to &quot;The Factory Pattern {#The-Factory-Pattern}&quot;">​</a></h3><p>Observation models follow a two-stage pattern:</p><ol><li><p><strong>ObservationModel</strong>: A factory that defines the model structure and hyperparameters</p></li><li><p><strong>ObservationLikelihood</strong>: A materialized instance with specific data and hyperparameters for fast evaluation</p></li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 1: Configure observation model (factory)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Normal)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 2: Materialize with data and hyperparameters  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y; σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 3: Fast evaluation in hot loops</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Only x argument needed!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">grad </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loggrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fast x-only evaluation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loghessian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span></code></pre></div><p>This pattern eliminates the need to repeatedly pass data and hyperparameters, providing significant performance benefits in optimization and sampling algorithms.</p><h3 id="Evaluation-Interface" tabindex="-1">Evaluation Interface <a class="header-anchor" href="#Evaluation-Interface" aria-label="Permalink to &quot;Evaluation Interface {#Evaluation-Interface}&quot;">​</a></h3><p>All materialized observation likelihoods support a common interface:</p><ul><li><p><code>loglik(x, obs_lik)</code>: Evaluate log-likelihood</p></li><li><p><code>loggrad(x, obs_lik)</code>: Compute gradient with respect to latent field</p></li><li><p><code>loghessian(x, obs_lik)</code>: Compute Hessian matrix</p></li></ul><h2 id="Exponential-Family-Models" tabindex="-1">Exponential Family Models <a class="header-anchor" href="#Exponential-Family-Models" aria-label="Permalink to &quot;Exponential Family Models {#Exponential-Family-Models}&quot;">​</a></h2><p>The most common observation models are exponential family distributions connected to the latent field through link functions.</p><h3 id="Basic-Usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#Basic-Usage" aria-label="Permalink to &quot;Basic Usage {#Basic-Usage}&quot;">​</a></h3><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GaussianMarkovRandomFields</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Distributions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Poisson model for count data (canonical LogLink)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poisson_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Latent field (log-intensity due to LogLink)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Count observations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> poisson_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Normal model for continuous data (canonical IdentityLink)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">normal_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Latent field (direct mean due to IdentityLink)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Continuous observations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> normal_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y; σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Normal requires σ hyperparameter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Bernoulli model for binary data (canonical LogitLink)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bernoulli_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Bernoulli)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Latent field (logit-probability due to LogitLink)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Binary observations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bernoulli_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span></code></pre></div><h3 id="Supported-Distributions-and-Links" tabindex="-1">Supported Distributions and Links <a class="header-anchor" href="#Supported-Distributions-and-Links" aria-label="Permalink to &quot;Supported Distributions and Links {#Supported-Distributions-and-Links}&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:right;">Distribution</th><th style="text-align:right;">Canonical Link</th><th style="text-align:right;">Alternative Links</th><th style="text-align:right;">Hyperparameters</th></tr></thead><tbody><tr><td style="text-align:right;">Normal</td><td style="text-align:right;">IdentityLink</td><td style="text-align:right;">LogLink</td><td style="text-align:right;">σ (std. dev.)</td></tr><tr><td style="text-align:right;">Poisson</td><td style="text-align:right;">LogLink</td><td style="text-align:right;">IdentityLink</td><td style="text-align:right;">none</td></tr><tr><td style="text-align:right;">Bernoulli</td><td style="text-align:right;">LogitLink</td><td style="text-align:right;">LogLink</td><td style="text-align:right;">none</td></tr><tr><td style="text-align:right;">Binomial</td><td style="text-align:right;">LogitLink</td><td style="text-align:right;">IdentityLink</td><td style="text-align:right;">none*</td></tr></tbody></table><p>*For Binomial, the number of trials is provided through the data structure <code>BinomialObservations</code>, not as a hyperparameter.</p><h3 id="Custom-Link-Functions" tabindex="-1">Custom Link Functions <a class="header-anchor" href="#Custom-Link-Functions" aria-label="Permalink to &quot;Custom Link Functions {#Custom-Link-Functions}&quot;">​</a></h3><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Non-canonical link function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poisson_identity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IdentityLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Note: Requires positive latent field values for valid Poisson intensities</span></span></code></pre></div><h2 id="Custom-Observation-Models" tabindex="-1">Custom Observation Models <a class="header-anchor" href="#Custom-Observation-Models" aria-label="Permalink to &quot;Custom Observation Models {#Custom-Observation-Models}&quot;">​</a></h2><p>For models not covered by exponential families, you can define custom log-likelihood functions using automatic differentiation.</p><h3 id="Basic-AutoDiff-Models" tabindex="-1">Basic AutoDiff Models <a class="header-anchor" href="#Basic-AutoDiff-Models" aria-label="Permalink to &quot;Basic AutoDiff Models {#Basic-AutoDiff-Models}&quot;">​</a></h3><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define custom log-likelihood function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> custom_loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    μ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(x)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Custom transformation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> μ)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(σ)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create observation model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AutoDiffObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(custom_loglik; n_latent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hyperparams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:σ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Materialize with data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use normally - gradients and Hessians computed automatically!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">grad </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loggrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Automatic differentiation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loghessian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Potentially sparse!</span></span></code></pre></div><h3 id="Automatic-Differentiation-Requirements" tabindex="-1">Automatic Differentiation Requirements <a class="header-anchor" href="#Automatic-Differentiation-Requirements" aria-label="Permalink to &quot;Automatic Differentiation Requirements {#Automatic-Differentiation-Requirements}&quot;">​</a></h3><p>AutoDiff observation models require an automatic differentiation backend. We support and recommend the following backends in order of preference:</p><ol><li><p><strong>Enzyme.jl</strong> (recommended for performance)</p></li><li><p><strong>Mooncake.jl</strong> (good balance of performance and compatibility)</p></li><li><p><strong>Zygote.jl</strong> (reliable fallback)</p></li><li><p><strong>ForwardDiff.jl</strong> (for small problems)</p></li></ol><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Load an AD backend (required for AutoDiffObservationModel)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Enzyme  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Recommended</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Or use another supported backend:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># using Mooncake</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># using Zygote</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># using ForwardDiff</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Now you can use AutoDiff models</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AutoDiffObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_loglik; n_latent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">grad </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loggrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses your loaded AD backend</span></span></code></pre></div><h3 id="Sparse-Hessian-Computation" tabindex="-1">Sparse Hessian Computation <a class="header-anchor" href="#Sparse-Hessian-Computation" aria-label="Permalink to &quot;Sparse Hessian Computation {#Sparse-Hessian-Computation}&quot;">​</a></h3><p>AutoDiff observation models can automatically detect and exploit sparsity in Hessian matrices using our package extensions. This requires loading both an AD backend and additional sparsity packages:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Load AD backend + sparse AD packages</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Enzyme  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Or your preferred AD backend</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SparseConnectivityTracer, SparseMatrixColorings</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The package extension is automatically activated</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AutoDiffObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_loglik; n_latent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Hessian computation now automatically:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - Detects sparsity pattern using TracerSparsityDetector  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - Uses greedy coloring for efficient computation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># - Returns sparse matrix when beneficial</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loghessian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># May be sparse!</span></span></code></pre></div><p>The sparse Hessian features provide dramatic performance improvements for large-scale problems with structured sparsity.</p><h2 id="Advanced-Features" tabindex="-1">Advanced Features <a class="header-anchor" href="#Advanced-Features" aria-label="Permalink to &quot;Advanced Features {#Advanced-Features}&quot;">​</a></h2><h3 id="Linear-Transformations-and-Design-Matrices" tabindex="-1">Linear Transformations and Design Matrices <a class="header-anchor" href="#Linear-Transformations-and-Design-Matrices" aria-label="Permalink to &quot;Linear Transformations and Design Matrices {#Linear-Transformations-and-Design-Matrices}&quot;">​</a></h3><p>For GLM-style modeling where observations are related to linear combinations of latent field components:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Design matrix mapping latent field to linear predictors</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rows = observations, Columns = latent components</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  20.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># obs 1: intercept + temp + group1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  25.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># obs 2: intercept + temp + group1  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  30.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># obs 3: intercept + temp + group2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">base_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># LogLink by default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LinearlyTransformedObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base_model, A)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Latent field now includes all components: [β₀, β₁, u₁, u₂]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_full </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># intercept, slope, group effects</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_full, obs_lik)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Chain rule applied automatically</span></span></code></pre></div><h3 id="Binomial-Observations" tabindex="-1">Binomial Observations <a class="header-anchor" href="#Binomial-Observations" aria-label="Permalink to &quot;Binomial Observations {#Binomial-Observations}&quot;">​</a></h3><p>For binomial data, use the <code>BinomialObservations</code> utility:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create binomial observations with successes and trials</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BinomialObservations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (successes, trials) pairs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use with Binomial model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binomial_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Binomial) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> binomial_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Access components</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">successes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [3, 1, 4]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [5, 8, 6]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (3, 5) - tuple access</span></span></code></pre></div><h3 id="Composite-Observations" tabindex="-1">Composite Observations <a class="header-anchor" href="#Composite-Observations" aria-label="Permalink to &quot;Composite Observations {#Composite-Observations}&quot;">​</a></h3><p>For multiple observation types in a single model:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Multiple observation vectors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binary_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CompositeObservations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count_data, binary_data)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Corresponding models for each observation type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poisson_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bernoulli_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Bernoulli) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">composite_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CompositeObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(poisson_model, bernoulli_model)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> composite_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Latent field x now corresponds to concatenated observations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span></code></pre></div><h2 id="API-Reference" tabindex="-1">API Reference <a class="header-anchor" href="#API-Reference" aria-label="Permalink to &quot;API Reference {#API-Reference}&quot;">​</a></h2><h3 id="Core-Types-and-Interface" tabindex="-1">Core Types and Interface <a class="header-anchor" href="#Core-Types-and-Interface" aria-label="Permalink to &quot;Core Types and Interface {#Core-Types-and-Interface}&quot;">​</a></h3>`,45)),i("details",d,[i("summary",null,[s[0]||(s[0]=i("a",{id:"GaussianMarkovRandomFields.ObservationModel",href:"#GaussianMarkovRandomFields.ObservationModel"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.ObservationModel")],-1)),s[1]||(s[1]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ObservationModel</span></span></code></pre></div><p>Abstract base type for all observation models for GMRFs.</p><p>An observation model defines the relationship between observations <code>y</code> and the latent field <code>x</code>, typically through a likelihood function. ObservationModel types serve as factories for creating ObservationLikelihood instances via callable syntax.</p><p><strong>Usage Pattern</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 1: Create observation model (factory)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Normal)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 2: Materialize with data and hyperparameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y; σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creates ObservationLikelihood</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 3: Use materialized likelihood in hot loops</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fast x-only evaluation</span></span></code></pre></div><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.ObservationLikelihood"><code>ObservationLikelihood</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.ExponentialFamily"><code>ExponentialFamily</code></a></p>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[2]||(s[2]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/observation_model.jl#L5-L27",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",g,[i("summary",null,[s[4]||(s[4]=i("a",{id:"GaussianMarkovRandomFields.ObservationLikelihood",href:"#GaussianMarkovRandomFields.ObservationLikelihood"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.ObservationLikelihood")],-1)),s[5]||(s[5]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ObservationLikelihood</span></span></code></pre></div><p>Abstract base type for materialized observation likelihoods.</p><p>Observation likelihoods are created by materializing an observation model with specific hyperparameters θ and observed data y. They provide efficient evaluation methods that only depend on the latent field x, eliminating the need to repeatedly pass θ and y.</p><p>This design provides major performance benefits in optimization loops and cleaner automatic differentiation boundaries.</p><p><strong>Usage Pattern</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 1: Configure observation model (factory)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Normal)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 2: Materialize with data and hyperparameters  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y; σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 3: Fast evaluation in hot loops</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Only x argument needed!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">grad </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loggrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fast x-only evaluation</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[6]||(s[6]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/observation_likelihood.jl#L7-L32",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",E,[i("summary",null,[s[8]||(s[8]=i("a",{id:"GaussianMarkovRandomFields.hyperparameters-Tuple{ObservationModel}",href:"#GaussianMarkovRandomFields.hyperparameters-Tuple{ObservationModel}"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.hyperparameters")],-1)),s[9]||(s[9]=t()),n(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hyperparameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs_model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tuple{Vararg{Symbol}}</span></span></code></pre></div><p>Return a tuple of required hyperparameter names for this observation model.</p><p>This method defines which hyperparameters the observation model expects to receive when materializing an ObservationLikelihood instance.</p><p><strong>Arguments</strong></p><ul><li><code>obs_model</code>: An observation model implementing the <code>ObservationModel</code> interface</li></ul><p><strong>Returns</strong></p><ul><li><code>Tuple{Vararg{Symbol}}</code>: Tuple of parameter names (e.g., <code>(:σ,)</code> or <code>(:α, :β)</code>)</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hyperparameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Normal)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:σ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hyperparameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Bernoulli)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span></code></pre></div><p><strong>Implementation</strong></p><p>All observation models should implement this method. The default returns an empty tuple.</p>`,11)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[10]||(s[10]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/observation_model.jl#L51-L73",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",y,[i("summary",null,[s[12]||(s[12]=i("a",{id:"GaussianMarkovRandomFields.latent_dimension",href:"#GaussianMarkovRandomFields.latent_dimension"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.latent_dimension")],-1)),s[13]||(s[13]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[16]||(s[16]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">latent_dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs_model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Union{Int, Nothing}</span></span></code></pre></div><p>Return the latent field dimension for this observation model given observations y.</p><p>For most observation models, this will be <code>length(y)</code> (1:1 mapping). For transformed observation models like <code>LinearlyTransformedObservationModel</code>, this will be the dimension of the design matrix.</p><p>Returns <code>nothing</code> if the latent dimension cannot be determined automatically.</p><p><strong>Arguments</strong></p><ul><li><p><code>obs_model</code>: An observation model implementing the <code>ObservationModel</code> interface</p></li><li><p><code>y</code>: Vector of observations</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Int</code>: The latent field dimension, or <code>nothing</code> if unknown</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">latent_dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Normal), y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">latent_dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearlyTransformedObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base, A), y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(A, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,10)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[14]||(s[14]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/observation_model.jl#L76-L99",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[17]||(s[17]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">latent_dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int</span></span></code></pre></div><p>Return the latent field dimension for exponential family models.</p><p>For ExponentialFamily models, there is a direct 1:1 mapping between observations and latent field components, so the latent dimension equals the observation dimension.</p>',3)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[15]||(s[15]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/exponential_family.jl#L204-L211",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",c,[i("summary",null,[s[18]||(s[18]=i("a",{id:"GaussianMarkovRandomFields.loglik",href:"#GaussianMarkovRandomFields.loglik"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.loglik")],-1)),s[19]||(s[19]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[24]||(s[24]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, lik</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExponentialFamilyLikelihood</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64</span></span></code></pre></div><p>Generic loglik implementation for all exponential family likelihoods using product_distribution.</p>',2)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[20]||(s[20]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/canonical_implementations.jl#L12-L16",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[25]||(s[25]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, lik</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NormalLikelihood</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64</span></span></code></pre></div><p>Specialized fast implementation for Normal likelihood that avoids product_distribution overhead.</p><p>Computes: ∑ᵢ logpdf(Normal(μᵢ, σ), yᵢ) = -n/2 * log(2π) - n * log(σ) - 1/(2σ²) * ∑ᵢ(yᵢ - μᵢ)²</p>',3)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[21]||(s[21]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/canonical_implementations.jl#L26-L32",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[26]||(s[26]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, composite_lik</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CompositeLikelihood</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64</span></span></code></pre></div><p>Compute the log-likelihood of a composite likelihood by summing component contributions.</p><p>Each component likelihood receives the full latent field <code>x</code> and contributes to the total log-likelihood. This handles cases where components may have overlapping dependencies on the latent field.</p>',3)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[22]||(s[22]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/composite/composite_evaluation.jl#L8-L16",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[27]||(s[27]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AutoDiffLikelihood</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Real</span></span></code></pre></div><p>Evaluate the log-likelihood function at latent field <code>x</code>.</p><p>Calls the stored log-likelihood function, which typically includes all necessary hyperparameters and data as a closure.</p>',3)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[23]||(s[23]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/autodiff_likelihood.jl#L224-L231",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",u,[i("summary",null,[s[28]||(s[28]=i("a",{id:"GaussianMarkovRandomFields.loggrad",href:"#GaussianMarkovRandomFields.loggrad"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.loggrad")],-1)),s[29]||(s[29]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[32]||(s[32]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loggrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ObservationLikelihood</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{Float64}</span></span></code></pre></div><p>Automatic differentiation fallback for ObservationLikelihood gradient computation.</p>',2)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[30]||(s[30]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/observation_likelihood.jl#L45-L49",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[33]||(s[33]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loggrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, composite_lik</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CompositeLikelihood</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{Float64}</span></span></code></pre></div><p>Compute the gradient of the log-likelihood by summing component gradients.</p><p>Each component contributes its gradient with respect to the full latent field <code>x</code>. For overlapping dependencies, gradients are automatically summed at each latent field element.</p>',3)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[31]||(s[31]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/composite/composite_evaluation.jl#L21-L28",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",m,[i("summary",null,[s[34]||(s[34]=i("a",{id:"GaussianMarkovRandomFields.loghessian",href:"#GaussianMarkovRandomFields.loghessian"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.loghessian")],-1)),s[35]||(s[35]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[38]||(s[38]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loghessian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ObservationLikelihood</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractMatrix{Float64}</span></span></code></pre></div><p>Automatic differentiation fallback for ObservationLikelihood Hessian computation.</p>',2)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[36]||(s[36]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/observation_likelihood.jl#L68-L72",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[39]||(s[39]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loghessian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, composite_lik</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CompositeLikelihood</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractMatrix{Float64}</span></span></code></pre></div><p>Compute the Hessian of the log-likelihood by summing component Hessians.</p><p>Each component contributes its Hessian with respect to the full latent field <code>x</code>. For overlapping dependencies, Hessians are automatically summed element-wise.</p>',3)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[37]||(s[37]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/composite/composite_evaluation.jl#L41-L48",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[133]||(s[133]=i("h3",{id:"Exponential-Family-Models-2",tabindex:"-1"},[t("Exponential Family Models "),i("a",{class:"header-anchor",href:"#Exponential-Family-Models-2","aria-label":'Permalink to "Exponential Family Models {#Exponential-Family-Models-2}"'},"​")],-1)),i("details",F,[i("summary",null,[s[40]||(s[40]=i("a",{id:"GaussianMarkovRandomFields.ExponentialFamily",href:"#GaussianMarkovRandomFields.ExponentialFamily"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.ExponentialFamily")],-1)),s[41]||(s[41]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[43]||(s[43]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExponentialFamily{F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinkFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationModel</span></span></code></pre></div><p>Observation model for exponential family distributions with link functions.</p><p>This struct represents observation models where the observations come from an exponential family distribution (Normal, Poisson, Bernoulli, Binomial) and the mean parameter is related to the latent field through a link function.</p><p><strong>Mathematical Model</strong></p><p>For observations yᵢ and latent field values xᵢ:</p><ul><li><p>Linear predictor: ηᵢ = xᵢ</p></li><li><p>Mean parameter: μᵢ = g⁻¹(ηᵢ) where g is the link function</p></li><li><p>Observations: yᵢ ~ F(μᵢ, θ) where F is the distribution family</p></li></ul><p><strong>Fields</strong></p><ul><li><p><code>family::Type{F}</code>: The distribution family (e.g., <code>Poisson</code>, <code>Bernoulli</code>)</p></li><li><p><code>link::L</code>: The link function connecting mean parameters to linear predictors</p></li></ul><p><strong>Type Parameters</strong></p><ul><li><p><code>F</code>: A subtype of <code>Distribution</code> from Distributions.jl</p></li><li><p><code>L</code>: A subtype of <code>LinkFunction</code></p></li></ul><p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use canonical link (recommended)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson)        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses LogLink()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Bernoulli)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses LogitLink()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Normal)         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses IdentityLink()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Specify custom link function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IdentityLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Non-canonical</span></span></code></pre></div><p><strong>Supported Combinations</strong></p><ul><li><p><code>Normal</code> with <code>IdentityLink</code> (canonical) or <code>LogLink</code></p></li><li><p><code>Poisson</code> with <code>LogLink</code> (canonical) or <code>IdentityLink</code></p></li><li><p><code>Bernoulli</code> with <code>LogitLink</code> (canonical) or <code>LogLink</code></p></li><li><p><code>Binomial</code> with <code>LogitLink</code> (canonical) or <code>IdentityLink</code></p></li></ul><p><strong>Hyperparameters (θ)</strong></p><p>Different families require different hyperparameters:</p><ul><li><p><code>Normal</code>: <code>θ = [σ]</code> (standard deviation)</p></li><li><p><code>Poisson</code>: <code>θ = []</code> (no hyperparameters)</p></li><li><p><code>Bernoulli</code>: <code>θ = []</code> (no hyperparameters)</p></li><li><p><code>Binomial</code>: <code>θ = [n]</code> (number of trials)</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Poisson model for count data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Latent field (log scale due to LogLink)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">θ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64[]         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># No hyperparameters  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Count observations</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, model, θ, y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, x, θ)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Returns Product distribution</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Bernoulli model for binary data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Bernoulli)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Latent field (logit scale due to LogitLink)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Binary observations</span></span></code></pre></div><p><strong>Performance Notes</strong></p><p>Canonical link functions have optimized implementations that avoid redundant computations. Non-canonical links use general chain rule formulations which may be slower.</p><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.LinkFunction"><code>LinkFunction</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.loglik"><code>loglik</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.data_distribution"><code>data_distribution</code></a></p>`,22)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[42]||(s[42]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/exponential_family.jl#L7-L76",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",b,[i("summary",null,[s[44]||(s[44]=i("a",{id:"GaussianMarkovRandomFields.data_distribution",href:"#GaussianMarkovRandomFields.data_distribution"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.data_distribution")],-1)),s[45]||(s[45]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[47]||(s[47]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obs_model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x, θ_named) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Distribution</span></span></code></pre></div><p>Construct the data-generating distribution p(y | x, θ).</p><p>This function returns a Distribution object that represents the probability distribution over observations y given latent field values x and hyperparameters θ. It is used for sampling new observations.</p><p><strong>Arguments</strong></p><ul><li><p><code>obs_model</code>: An ExponentialFamily observation model</p></li><li><p><code>x</code>: Latent field values (vector)</p></li><li><p><code>θ_named</code>: Hyperparameters as a NamedTuple</p></li></ul><p><strong>Returns</strong></p><p>Distribution object that can be used with <code>rand()</code> to generate observations</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">θ_named </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dist </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data_distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, x, θ_named)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dist)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Sample observations</span></span></code></pre></div><p>Note: For likelihood evaluation L(x|y,θ), use the materialized API:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y; θ_named</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span></code></pre></div>`,11)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[46]||(s[46]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/exponential_family.jl#L121-L152",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",C,[i("summary",null,[s[48]||(s[48]=i("a",{id:"GaussianMarkovRandomFields.ExponentialFamilyLikelihood",href:"#GaussianMarkovRandomFields.ExponentialFamilyLikelihood"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.ExponentialFamilyLikelihood")],-1)),s[49]||(s[49]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[51]||(s[51]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExponentialFamilyLikelihood{L, I} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationLikelihood</span></span></code></pre></div><p>Abstract type for exponential family observation likelihoods.</p><p>This intermediate type allows for generic implementations that work across all exponential family distributions while still allowing specialized methods for specific combinations.</p><p><strong>Type Parameters</strong></p><ul><li><p><code>L</code>: Link function type</p></li><li><p><code>I</code>: Index type (Nothing for non-indexed, UnitRange or Vector for indexed)</p></li></ul>',5)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[50]||(s[50]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/observation_likelihoods.jl#L3-L15",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",v,[i("summary",null,[s[52]||(s[52]=i("a",{id:"GaussianMarkovRandomFields.NormalLikelihood",href:"#GaussianMarkovRandomFields.NormalLikelihood"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.NormalLikelihood")],-1)),s[53]||(s[53]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[55]||(s[55]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NormalLikelihood{L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinkFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationLikelihood</span></span></code></pre></div><p>Materialized Normal observation likelihood with precomputed hyperparameters.</p><p><strong>Fields</strong></p><ul><li><p><code>link::L</code>: Link function connecting latent field to mean parameter</p></li><li><p><code>y::Vector{Float64}</code>: Observed data</p></li><li><p><code>σ::Float64</code>: Standard deviation hyperparameter</p></li><li><p><code>inv_σ²::Float64</code>: Precomputed 1/σ² for performance</p></li><li><p><code>log_σ::Float64</code>: Precomputed log(σ) for log-likelihood computation</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># NormalLikelihood{IdentityLink}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], obs_lik)</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[54]||(s[54]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/observation_likelihoods.jl#L18-L36",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[s[56]||(s[56]=i("a",{id:"GaussianMarkovRandomFields.PoissonLikelihood",href:"#GaussianMarkovRandomFields.PoissonLikelihood"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.PoissonLikelihood")],-1)),s[57]||(s[57]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[59]||(s[59]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PoissonLikelihood{L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinkFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationLikelihood</span></span></code></pre></div><p>Materialized Poisson observation likelihood.</p><p><strong>Fields</strong></p><ul><li><p><code>link::L</code>: Link function connecting latent field to rate parameter</p></li><li><p><code>y::Vector{Int}</code>: Count observations</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses LogLink by default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PoissonLikelihood{LogLink}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], obs_lik)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># x values on log scale</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[58]||(s[58]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/observation_likelihoods.jl#L46-L61",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",A,[i("summary",null,[s[60]||(s[60]=i("a",{id:"GaussianMarkovRandomFields.BernoulliLikelihood",href:"#GaussianMarkovRandomFields.BernoulliLikelihood"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.BernoulliLikelihood")],-1)),s[61]||(s[61]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[63]||(s[63]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BernoulliLikelihood{L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinkFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationLikelihood</span></span></code></pre></div><p>Materialized Bernoulli observation likelihood for binary data.</p><p><strong>Fields</strong></p><ul><li><p><code>link::L</code>: Link function connecting latent field to probability parameter</p></li><li><p><code>y::Vector{Int}</code>: Binary observations (0 or 1)</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Bernoulli)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses LogitLink by default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># BernoulliLikelihood{LogitLink}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], obs_lik)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># x values on logit scale</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[62]||(s[62]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/observation_likelihoods.jl#L68-L83",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",D,[i("summary",null,[s[64]||(s[64]=i("a",{id:"GaussianMarkovRandomFields.BinomialLikelihood",href:"#GaussianMarkovRandomFields.BinomialLikelihood"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.BinomialLikelihood")],-1)),s[65]||(s[65]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[67]||(s[67]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BinomialLikelihood{L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinkFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationLikelihood</span></span></code></pre></div><p>Materialized Binomial observation likelihood.</p><p><strong>Fields</strong></p><ul><li><p><code>link::L</code>: Link function connecting latent field to probability parameter</p></li><li><p><code>y::Vector{Int}</code>: Number of successes for each trial</p></li><li><p><code>n::Vector{Int}</code>: Number of trials per observation (can vary across observations)</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Binomial)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses LogitLink by default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; trials</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># BinomialLikelihood{LogitLink}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], obs_lik)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># x values on logit scale</span></span></code></pre></div>`,6)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[66]||(s[66]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/observation_likelihoods.jl#L90-L106",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[134]||(s[134]=i("h3",{id:"Link-Functions",tabindex:"-1"},[t("Link Functions "),i("a",{class:"header-anchor",href:"#Link-Functions","aria-label":'Permalink to "Link Functions {#Link-Functions}"'},"​")],-1)),i("details",_,[i("summary",null,[s[68]||(s[68]=i("a",{id:"GaussianMarkovRandomFields.LinkFunction",href:"#GaussianMarkovRandomFields.LinkFunction"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.LinkFunction")],-1)),s[69]||(s[69]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[71]||(s[71]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinkFunction</span></span></code></pre></div><p>Abstract base type for link functions used in exponential family models.</p><p>A link function g(μ) connects the mean parameter μ of a distribution to the linear predictor η through the relationship g(μ) = η, or equivalently μ = g⁻¹(η).</p><p><strong>Implemented Link Functions</strong></p><ul><li><p><a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.IdentityLink"><code>IdentityLink</code></a>: g(μ) = μ (for Normal distributions)</p></li><li><p><a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.LogLink"><code>LogLink</code></a>: g(μ) = log(μ) (for Poisson distributions)</p></li><li><p><a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.LogitLink"><code>LogitLink</code></a>: g(μ) = logit(μ) (for Bernoulli/Binomial distributions)</p></li></ul><p><strong>Interface</strong></p><p>Concrete link functions must implement:</p><ul><li><p><code>apply_link(link, μ)</code>: Apply the link function g(μ)</p></li><li><p><code>apply_invlink(link, η)</code>: Apply the inverse link function g⁻¹(η)</p></li></ul><p>For performance in GMRF computations, they should also implement:</p><ul><li><p><code>derivative_invlink(link, η)</code>: First derivative of g⁻¹(η)</p></li><li><p><code>second_derivative_invlink(link, η)</code>: Second derivative of g⁻¹(η)</p></li></ul><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.ExponentialFamily"><code>ExponentialFamily</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.apply_link"><code>apply_link</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.apply_invlink"><code>apply_invlink</code></a></p>',11)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[70]||(s[70]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/link_functions.jl#L6-L29",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",B,[i("summary",null,[s[72]||(s[72]=i("a",{id:"GaussianMarkovRandomFields.IdentityLink",href:"#GaussianMarkovRandomFields.IdentityLink"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.IdentityLink")],-1)),s[73]||(s[73]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[75]||(s[75]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IdentityLink </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LinkFunction</span></span></code></pre></div><p>Identity link function: g(μ) = μ.</p><p>This is the canonical link for Normal distributions. The mean parameter μ is directly equal to the linear predictor η.</p><p><strong>Mathematical Definition</strong></p><ul><li><p>Link: g(μ) = μ</p></li><li><p>Inverse link: g⁻¹(η) = η</p></li><li><p>First derivative: d/dη g⁻¹(η) = 1</p></li><li><p>Second derivative: d²/dη² g⁻¹(η) = 0</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">link </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> IdentityLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">μ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> apply_invlink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># μ = 1.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">η </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> apply_link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link, μ)       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># η = 1.5</span></span></code></pre></div><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.LogLink"><code>LogLink</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.LogitLink"><code>LogitLink</code></a></p>`,8)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[74]||(s[74]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/link_functions.jl#L32-L54",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",T,[i("summary",null,[s[76]||(s[76]=i("a",{id:"GaussianMarkovRandomFields.LogLink",href:"#GaussianMarkovRandomFields.LogLink"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.LogLink")],-1)),s[77]||(s[77]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[79]||(s[79]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LogLink </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LinkFunction</span></span></code></pre></div><p>Logarithmic link function: g(μ) = log(μ).</p><p>This is the canonical link for Poisson and Gamma distributions. It ensures the mean parameter μ remains positive by mapping the real-valued linear predictor η to μ = exp(η).</p><p><strong>Mathematical Definition</strong></p><ul><li><p>Link: g(μ) = log(μ)</p></li><li><p>Inverse link: g⁻¹(η) = exp(η)</p></li><li><p>First derivative: d/dη g⁻¹(η) = exp(η)</p></li><li><p>Second derivative: d²/dη² g⁻¹(η) = exp(η)</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">link </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LogLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">μ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> apply_invlink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># μ = exp(1.0) ≈ 2.718</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">η </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> apply_link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link, μ)       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># η = log(μ) = 1.0</span></span></code></pre></div><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.IdentityLink"><code>IdentityLink</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.LogitLink"><code>LogitLink</code></a></p>`,8)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[78]||(s[78]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/link_functions.jl#L57-L80",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",x,[i("summary",null,[s[80]||(s[80]=i("a",{id:"GaussianMarkovRandomFields.LogitLink",href:"#GaussianMarkovRandomFields.LogitLink"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.LogitLink")],-1)),s[81]||(s[81]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[83]||(s[83]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LogitLink </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LinkFunction</span></span></code></pre></div><p>Logit link function: g(μ) = logit(μ) = log(μ/(1-μ)).</p><p>This is the canonical link for Bernoulli and Binomial distributions. It maps probabilities μ ∈ (0,1) to the real line via the logistic transformation, ensuring μ = logistic(η) = 1/(1+exp(-η)) remains a valid probability.</p><p><strong>Mathematical Definition</strong></p><ul><li><p>Link: g(μ) = logit(μ) = log(μ/(1-μ))</p></li><li><p>Inverse link: g⁻¹(η) = logistic(η) = 1/(1+exp(-η))</p></li><li><p>First derivative: d/dη g⁻¹(η) = μ(1-μ) where μ = logistic(η)</p></li><li><p>Second derivative: d²/dη² g⁻¹(η) = μ(1-μ)(1-2μ)</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">link </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LogitLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">μ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> apply_invlink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># μ = logistic(0.0) = 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">η </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> apply_link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link, μ)       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># η = logit(0.5) = 0.0</span></span></code></pre></div><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.IdentityLink"><code>IdentityLink</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.LogLink"><code>LogLink</code></a></p>`,8)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[82]||(s[82]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/link_functions.jl#L83-L106",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",j,[i("summary",null,[s[84]||(s[84]=i("a",{id:"GaussianMarkovRandomFields.apply_link",href:"#GaussianMarkovRandomFields.apply_link"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.apply_link")],-1)),s[85]||(s[85]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[87]||(s[87]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply_link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinkFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, μ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Real</span></span></code></pre></div><p>Apply the link function g(μ) to transform mean parameters to linear predictor scale.</p><p>This function computes η = g(μ), where g is the link function. This transformation is typically used to ensure the mean parameter satisfies appropriate constraints (e.g., positivity for Poisson, probability bounds for Bernoulli).</p><p><strong>Arguments</strong></p><ul><li><p><code>link</code>: A link function (IdentityLink, LogLink, or LogitLink)</p></li><li><p><code>μ</code>: Mean parameter value(s) in the natural parameter space</p></li></ul><p><strong>Returns</strong></p><p>The transformed value(s) η on the linear predictor scale</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply_link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LogLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.718</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ≈ 1.0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply_link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LogitLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># = 0.0  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply_link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IdentityLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># = 1.5</span></span></code></pre></div><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.apply_invlink"><code>apply_invlink</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.LinkFunction"><code>LinkFunction</code></a></p>`,10)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[86]||(s[86]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/link_functions.jl#L109-L133",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",L,[i("summary",null,[s[88]||(s[88]=i("a",{id:"GaussianMarkovRandomFields.apply_invlink",href:"#GaussianMarkovRandomFields.apply_invlink"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.apply_invlink")],-1)),s[89]||(s[89]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[91]||(s[91]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply_invlink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(link</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinkFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, η) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Real</span></span></code></pre></div><p>Apply the inverse link function g⁻¹(η) to transform linear predictor to mean parameters.</p><p>This function computes μ = g⁻¹(η), where g⁻¹ is the inverse link function. This is the primary transformation used in GMRF models to convert the latent field values to the natural parameter space of the observation distribution.</p><p><strong>Arguments</strong></p><ul><li><p><code>link</code>: A link function (IdentityLink, LogLink, or LogitLink)</p></li><li><p><code>η</code>: Linear predictor value(s)</p></li></ul><p><strong>Returns</strong></p><p>The transformed value(s) μ in the natural parameter space</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply_invlink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LogLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ≈ 2.718 (= exp(1))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply_invlink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LogitLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># = 0.5   (= logistic(0))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply_invlink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IdentityLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># = 1.5</span></span></code></pre></div><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.apply_link"><code>apply_link</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.LinkFunction"><code>LinkFunction</code></a></p>`,10)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[90]||(s[90]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/exponential_family/link_functions.jl#L138-L162",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[135]||(s[135]=i("h3",{id:"Custom-AutoDiff-Models",tabindex:"-1"},[t("Custom AutoDiff Models "),i("a",{class:"header-anchor",href:"#Custom-AutoDiff-Models","aria-label":'Permalink to "Custom AutoDiff Models {#Custom-AutoDiff-Models}"'},"​")],-1)),i("details",M,[i("summary",null,[s[92]||(s[92]=i("a",{id:"GaussianMarkovRandomFields.AutoDiffObservationModel",href:"#GaussianMarkovRandomFields.AutoDiffObservationModel"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.AutoDiffObservationModel")],-1)),s[93]||(s[93]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[95]||(s[95]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AutoDiffObservationModel{F, B, SB, H} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationModel</span></span></code></pre></div><p>Observation model that uses automatic differentiation for a user-provided log-likelihood function.</p><p>This serves as a factory for creating AutoDiffLikelihood instances. The user provides a log-likelihood function that can accept hyperparameters, and when materialized, creates a closure with the hyperparameters baked in.</p><p><strong>Type Parameters</strong></p><ul><li><p><code>F</code>: Type of the log-likelihood function</p></li><li><p><code>B</code>: Type of the AD backend for gradients</p></li><li><p><code>SB</code>: Type of the AD backend for Hessians</p></li><li><p><code>H</code>: Type of the hyperparameters tuple</p></li></ul><p><strong>Fields</strong></p><ul><li><p><code>loglik_func::F</code>: User-provided log-likelihood function with signature <code>(x; kwargs...) -&gt; Real</code></p></li><li><p><code>n_latent::Int</code>: Number of latent field components</p></li><li><p><code>grad_backend::B</code>: AD backend for gradient computation</p></li><li><p><code>hess_backend::SB</code>: AD backend for Hessian computation</p></li><li><p><code>hyperparams::H</code>: Tuple of hyperparameter names that this model expects</p></li></ul><p><strong>Usage</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define your log-likelihood function with hyperparameters</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    μ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or some transformation of x</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> μ)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(σ)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create observation model specifying expected hyperparameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AutoDiffObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_loglik; n_latent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hyperparams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:σ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Materialize with specific hyperparameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creates AutoDiffLikelihood</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use normally</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">grad </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loggrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loghessian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span></code></pre></div><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.AutoDiffLikelihood"><code>AutoDiffLikelihood</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.ObservationModel"><code>ObservationModel</code></a></p>`,10)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[94]||(s[94]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/autodiff_likelihood.jl#L66-L109",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",R,[i("summary",null,[s[96]||(s[96]=i("a",{id:"GaussianMarkovRandomFields.AutoDiffLikelihood",href:"#GaussianMarkovRandomFields.AutoDiffLikelihood"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.AutoDiffLikelihood")],-1)),s[97]||(s[97]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[99]||(s[99]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AutoDiffLikelihood{F, B, SB, GP, HP} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationLikelihood</span></span></code></pre></div><p>Automatic differentiation-based observation likelihood that wraps a user-provided log-likelihood function.</p><p>This is a materialized likelihood created from an AutoDiffObservationModel. The log-likelihood function is typically a closure that already includes hyperparameters and data.</p><p><strong>Type Parameters</strong></p><ul><li><p><code>F</code>: Type of the log-likelihood function (usually a closure)</p></li><li><p><code>B</code>: Type of the AD backend for gradients</p></li><li><p><code>SB</code>: Type of the AD backend for Hessians</p></li><li><p><code>GP</code>: Type of the gradient preparation object</p></li><li><p><code>HP</code>: Type of the Hessian preparation object</p></li></ul><p><strong>Fields</strong></p><ul><li><p><code>loglik_func::F</code>: Log-likelihood function with signature <code>(x) -&gt; Real</code></p></li><li><p><code>grad_backend::B</code>: AD backend for gradient computation</p></li><li><p><code>hess_backend::SB</code>: AD backend for Hessian computation</p></li><li><p><code>grad_prep::GP</code>: Preparation object for gradient computation</p></li><li><p><code>hess_prep::HP</code>: Preparation object for Hessian computation</p></li></ul><p><strong>Usage</strong></p><p>Typically created via AutoDiffObservationModel factory:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define your log-likelihood function with hyperparameters</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x; σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    μ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or some transformation of x</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> μ)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(σ)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create observation model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AutoDiffObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_loglik, n_latent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Materialize with data and hyperparameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creates AutoDiffLikelihood</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use in the standard way</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">grad </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loggrad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Uses prepared AD with optimal backends</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loghessian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, obs_lik)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Automatically sparse when available!</span></span></code></pre></div><p><strong>Sparse Hessian Features</strong></p><p>The Hessian computation automatically:</p><ul><li><p>Detects sparsity pattern using TracerSparsityDetector</p></li><li><p>Uses greedy coloring for efficient computation</p></li><li><p>Returns a sparse matrix when beneficial</p></li><li><p>Falls back to dense computation for small problems</p></li></ul><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.loglik"><code>loglik</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.loggrad"><code>loggrad</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.loghessian"><code>loghessian</code></a></p>`,14)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[98]||(s[98]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/autodiff_likelihood.jl#L5-L57",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[136]||(s[136]=i("h3",{id:"Advanced-Features-2",tabindex:"-1"},[t("Advanced Features "),i("a",{class:"header-anchor",href:"#Advanced-Features-2","aria-label":'Permalink to "Advanced Features {#Advanced-Features-2}"'},"​")],-1)),i("details",G,[i("summary",null,[s[100]||(s[100]=i("a",{id:"GaussianMarkovRandomFields.LinearlyTransformedObservationModel",href:"#GaussianMarkovRandomFields.LinearlyTransformedObservationModel"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.LinearlyTransformedObservationModel")],-1)),s[101]||(s[101]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[103]||(s[103]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearlyTransformedObservationModel{M, A} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationModel</span></span></code></pre></div><p>Observation model that applies a linear transformation to the latent field before passing to a base observation model. This enables GLM-style modeling with design matrices while maintaining full compatibility with existing observation models.</p><p><strong>Mathematical Foundation</strong></p><p>The wrapper transforms the full latent field x_full to linear predictors η via a design matrix A:</p><ul><li><p>η = A * x_full</p></li><li><p>Base model operates on η as usual: p(y | η, θ)</p></li><li><p>Chain rule applied for gradients/Hessians:</p><ul><li><p>∇_{x_full} ℓ = A^T ∇_η ℓ</p></li><li><p>∇²_{x_full} ℓ = A^T ∇²_η ℓ A</p></li></ul></li></ul><p><strong>Type Parameters</strong></p><ul><li><p><code>M &lt;: ObservationModel</code>: Type of the base observation model</p></li><li><p><code>A</code>: Type of the design matrix (typically AbstractMatrix)</p></li></ul><p><strong>Fields</strong></p><ul><li><p><code>base_model::M</code>: The underlying observation model that operates on linear predictors</p></li><li><p><code>design_matrix::A</code>: Matrix mapping full latent field to observation-specific linear predictors</p></li></ul><p><strong>Usage Pattern</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 1: Create base observation model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">base_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># LogLink by default</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 2: Create design matrix (maps latent field to linear predictors)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># For: y ~ intercept + temperature + group_effects</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  20.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># obs 1: intercept + temp + group1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  25.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># obs 2: intercept + temp + group1  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  30.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># obs 3: intercept + temp + group2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  15.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># obs 4: intercept + temp + group3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 3: Create wrapped model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LinearlyTransformedObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base_model, A)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 4: Use in GMRF model - latent field now includes all components</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># x_full = [β₀, β₁, u₁, u₂, u₃]  # intercept, slope, group effects</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 5: Materialize with data and hyperparameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obs_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obs_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y; σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creates LinearlyTransformedLikelihood</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Step 6: Fast evaluation in optimization loops</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_full, obs_lik)</span></span></code></pre></div><p><strong>Hyperparameters</strong></p><p>All hyperparameters come from the base observation model. The design matrix introduces no new hyperparameters - it&#39;s a fixed linear transformation.</p><p>See also: <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.LinearlyTransformedLikelihood"><code>LinearlyTransformedLikelihood</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.ExponentialFamily"><code>ExponentialFamily</code></a>, <a href="/GaussianMarkovRandomFields.jl/dev/reference/observation_models#GaussianMarkovRandomFields.ObservationModel"><code>ObservationModel</code></a></p>`,14)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[102]||(s[102]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/linearly_transformed.jl#L6-L60",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",S,[i("summary",null,[s[104]||(s[104]=i("a",{id:"GaussianMarkovRandomFields.LinearlyTransformedLikelihood",href:"#GaussianMarkovRandomFields.LinearlyTransformedLikelihood"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.LinearlyTransformedLikelihood")],-1)),s[105]||(s[105]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[107]||(s[107]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LinearlyTransformedLikelihood{L, A} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationLikelihood</span></span></code></pre></div><p>Materialized likelihood for LinearlyTransformedObservationModel with precomputed base likelihood and design matrix.</p><p>This is created by calling a LinearlyTransformedObservationModel instance with data and hyperparameters, following the factory pattern used throughout the package.</p><p><strong>Type Parameters</strong></p><ul><li><p><code>L &lt;: ObservationLikelihood</code>: Type of the materialized base likelihood</p></li><li><p><code>A</code>: Type of the design matrix</p></li></ul><p><strong>Fields</strong></p><ul><li><p><code>base_likelihood::L</code>: Materialized base observation likelihood (contains y and θ)</p></li><li><p><code>design_matrix::A</code>: Design matrix mapping full latent field to linear predictors</p></li></ul><p><strong>Usage</strong></p><p>This type is typically created automatically:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ltom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LinearlyTransformedObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base_model, design_matrix)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ltlik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ltom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y; σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creates LinearlyTransformedLikelihood</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ll </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loglik</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_full, ltlik)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fast evaluation</span></span></code></pre></div>`,10)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[106]||(s[106]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/linearly_transformed.jl#L81-L105",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",P,[i("summary",null,[s[108]||(s[108]=i("a",{id:"GaussianMarkovRandomFields.BinomialObservations",href:"#GaussianMarkovRandomFields.BinomialObservations"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.BinomialObservations")],-1)),s[109]||(s[109]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[111]||(s[111]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BinomialObservations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractVector{Tuple{Int, Int}}</span></span></code></pre></div><p>Combined observation type for binomial data containing both successes and trials.</p><p>This type packages binomial observation data (number of successes and trials) into a single vector-like object where each element is a (successes, trials) tuple.</p><p><strong>Fields</strong></p><ul><li><p><code>successes::Vector{Int}</code>: Number of successes for each observation</p></li><li><p><code>trials::Vector{Int}</code>: Number of trials for each observation</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create binomial observations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BinomialObservations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Access as tuples</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (3, 5)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (1, 8)</span></span></code></pre></div>`,7)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[110]||(s[110]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/binomial_observations.jl#L3-L24",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",O,[i("summary",null,[s[112]||(s[112]=i("a",{id:"GaussianMarkovRandomFields.successes",href:"#GaussianMarkovRandomFields.successes"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.successes")],-1)),s[113]||(s[113]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[115]||(s[115]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">successes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BinomialObservations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{Int}</span></span></code></pre></div><p>Extract the successes vector from binomial observations.</p>',2)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[114]||(s[114]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/binomial_observations.jl#L61-L65",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",I,[i("summary",null,[s[116]||(s[116]=i("a",{id:"GaussianMarkovRandomFields.trials",href:"#GaussianMarkovRandomFields.trials"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.trials")],-1)),s[117]||(s[117]=t()),n(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[119]||(s[119]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BinomialObservations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{Int}</span></span></code></pre></div><p>Extract the trials vector from binomial observations.</p>',2)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[118]||(s[118]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/binomial_observations.jl#L68-L72",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",w,[i("summary",null,[s[120]||(s[120]=i("a",{id:"GaussianMarkovRandomFields.CompositeObservations",href:"#GaussianMarkovRandomFields.CompositeObservations"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.CompositeObservations")],-1)),s[121]||(s[121]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[123]||(s[123]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompositeObservations{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractVector{Float64}</span></span></code></pre></div><p>A composite observation vector that stores observation data as a tuple of component vectors.</p><p>This type implements the <code>AbstractVector</code> interface and allows combining different observation datasets while maintaining their structure. The composite vector presents a unified view where indexing delegates to the appropriate component vector.</p><p><strong>Fields</strong></p><ul><li><code>components::T</code>: Tuple of observation vectors, one per likelihood component</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Gaussian observations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># More Gaussian observations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_composite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CompositeObservations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((y1, y2))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_composite)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_composite[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_composite[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4.0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_composite)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [1.0, 2.0, 3.0, 4.0, 5.0]</span></span></code></pre></div>`,7)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[122]||(s[122]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/composite/composite_observations.jl#L1-L24",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",V,[i("summary",null,[s[124]||(s[124]=i("a",{id:"GaussianMarkovRandomFields.CompositeObservationModel",href:"#GaussianMarkovRandomFields.CompositeObservationModel"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.CompositeObservationModel")],-1)),s[125]||(s[125]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[127]||(s[127]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompositeObservationModel{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationModel</span></span></code></pre></div><p>An observation model that combines multiple component observation models.</p><p>This type follows the factory pattern - it stores component observation models and creates <code>CompositeLikelihood</code> instances when called with observation data and hyperparameters.</p><p><strong>Fields</strong></p><ul><li><code>components::T</code>: Tuple of component observation models for type stability</li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gaussian_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Normal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poisson_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ExponentialFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Poisson)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">composite_model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CompositeObservationModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((gaussian_model, poisson_model))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Materialize with data and hyperparameters</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_composite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CompositeObservations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">composite_lik </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> composite_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_composite; σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,7)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[126]||(s[126]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/composite/composite_observation_model.jl#L1-L22",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",N,[i("summary",null,[s[128]||(s[128]=i("a",{id:"GaussianMarkovRandomFields.CompositeLikelihood",href:"#GaussianMarkovRandomFields.CompositeLikelihood"},[i("span",{class:"jlbinding"},"GaussianMarkovRandomFields.CompositeLikelihood")],-1)),s[129]||(s[129]=t()),n(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[131]||(s[131]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompositeLikelihood{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ObservationLikelihood</span></span></code></pre></div><p>A materialized composite likelihood that combines multiple component likelihoods.</p><p>Created by calling a <code>CompositeObservationModel</code> with observation data and hyperparameters. Provides efficient evaluation of log-likelihood, gradient, and Hessian by summing contributions from all component likelihoods.</p><p><strong>Fields</strong></p><ul><li><code>components::T</code>: Tuple of materialized component likelihoods</li></ul>',5)),n(a,{type:"info",class:"source-link",text:"source"},{default:e(()=>[...s[130]||(s[130]=[i("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/b617f7995618a6d08116bf544ec626e07080ed1e/src/observation_models/composite/composite_observation_model.jl#L34-L45",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const K=p(r,[["render",q]]);export{W as __pageData,K as default};
