import{_ as r,C as p,c as o,o as d,j as a,a as e,aA as n,G as i,w as l}from"./chunks/framework.B28kaWcy.js";const x=JSON.parse('{"title":"Linear Maps","description":"","frontmatter":{},"headers":[],"relativePath":"reference/linear_maps.md","filePath":"reference/linear_maps.md","lastUpdated":null}'),h={name:"reference/linear_maps.md"},m={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},T={class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},c={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-7.771ex"},xmlns:"http://www.w3.org/2000/svg",width:"17.86ex",height:"16.674ex",role:"img",focusable:"false",viewBox:"0 -3935 7894 7370","aria-hidden":"true"},g={class:"jldocstring custom-block",open:""},Q={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""};function M(F,s,_,C,v,A){const t=p("Badge");return d(),o("div",null,[s[39]||(s[39]=a("h1",{id:"Linear-Maps",tabindex:"-1"},[e("Linear Maps "),a("a",{class:"header-anchor",href:"#Linear-Maps","aria-label":'Permalink to "Linear Maps {#Linear-Maps}"'},"â€‹")],-1)),s[40]||(s[40]=a("p",null,[e("The construction of GMRFs involves various kinds of structured matrices. These structures may be leveraged in downstream computations to save compute and memory. But to make this possible, we need to actually keep track of these structures - which we achieve through diverse subtypes of "),a("a",{href:"https://julialinearalgebra.github.io/LinearMaps.jl/stable/",target:"_blank",rel:"noreferrer"},"LinearMap"),e(".")],-1)),a("details",m,[a("summary",null,[s[0]||(s[0]=a("a",{id:"GaussianMarkovRandomFields.SymmetricBlockTridiagonalMap",href:"#GaussianMarkovRandomFields.SymmetricBlockTridiagonalMap"},[a("span",{class:"jlbinding"},"GaussianMarkovRandomFields.SymmetricBlockTridiagonalMap")],-1)),s[1]||(s[1]=e()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SymmetricBlockTridiagonalMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    diagonal_blocks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{LinearMap{T},Vararg{LinearMap{T},ND}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    off_diagonal_blocks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{LinearMap{T},Vararg{LinearMap{T},NOD}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A linear map representing a symmetric block tridiagonal matrix with diagonal blocks <code>diagonal_blocks</code> and lower off-diagonal blocks <code>off_diagonal_blocks</code>.</p>`,2)),i(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[2]||(s[2]=[a("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/57a7c6c1c602e25080c466e0dade2d87e250b1b3/src/linear_maps/symmetric_block_tridiagonal.jl#L9-L18",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),a("details",k,[a("summary",null,[s[4]||(s[4]=a("a",{id:"GaussianMarkovRandomFields.SSMBidiagonalMap",href:"#GaussianMarkovRandomFields.SSMBidiagonalMap"},[a("span",{class:"jlbinding"},"GaussianMarkovRandomFields.SSMBidiagonalMap")],-1)),s[5]||(s[5]=e()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[9]||(s[9]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SSMBidiagonalMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    N_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Represents the block-bidiagonal map given by the (N_t) x (N_t - 1) sized block structure:</p>`,2)),a("mjx-container",T,[(d(),o("svg",c,[...s[6]||(s[6]=[n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,2781)" style="stroke-width:3;"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-2791)" style="stroke-width:3;"></path><svg width="667" height="3972" y="-1736" x="0" viewBox="0 993 667 3972"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,9.897)" style="stroke-width:3;"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,3185)"><g data-mml-node="mtd" transform="translate(4.5,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(1889,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(3574,0)"><g data-mml-node="mo"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(5930.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,1785)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(1759,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(3574,0)"><g data-mml-node="mo"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(5930.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,385)"><g data-mml-node="mtd" transform="translate(129.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(1759.5,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(3780,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(5930.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1785)"><g data-mml-node="mtd" transform="translate(240.5,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mtd" transform="translate(2000,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mtd" transform="translate(3519,0)"><g data-mml-node="mo"><path data-c="22F1" d="M133 760Q133 784 150 802T193 820Q217 820 235 804T254 761Q254 736 237 718T194 700T151 717T133 760ZM580 460Q580 484 597 502T640 520Q664 520 682 504T701 461Q701 436 684 418T641 400T598 417T580 460ZM1027 160Q1027 184 1044 202T1087 220Q1111 220 1129 204T1148 161Q1148 136 1131 118T1088 100T1045 117T1027 160Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(6041.5,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z" style="stroke-width:3;"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-3185)"><g data-mml-node="mtd" transform="translate(129.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(1889,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(3574,0)"><g data-mml-node="mo"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mtd" transform="translate(5801,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z" style="stroke-width:3;"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7227,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,2781)" style="stroke-width:3;"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-2791)" style="stroke-width:3;"></path><svg width="667" height="3972" y="-1736" x="0" viewBox="0 993 667 3972"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,9.897)" style="stroke-width:3;"></path></svg></g></g></g></g>',1)])])),s[7]||(s[7]=a("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("mrow",{"data-mjx-texclass":"INNER"},[a("mo",{"data-mjx-texclass":"OPEN"},"["),a("mtable",{columnspacing:"1em",rowspacing:"4pt"},[a("mtr",null,[a("mtd",null,[a("mi",null,"A")]),a("mtd",null,[a("mn",null,"0")]),a("mtd",null,[a("mo",null,"â‹¯")]),a("mtd",null,[a("mn",null,"0")])]),a("mtr",null,[a("mtd",null,[a("mi",null,"B")]),a("mtd",null,[a("mi",null,"C")]),a("mtd",null,[a("mo",null,"â‹¯")]),a("mtd",null,[a("mn",null,"0")])]),a("mtr",null,[a("mtd",null,[a("mn",null,"0")]),a("mtd",null,[a("mi",null,"B")]),a("mtd",null,[a("mi",null,"C")]),a("mtd",null,[a("mn",null,"0")])]),a("mtr",null,[a("mtd",null,[a("mrow",{"data-mjx-texclass":"ORD"},[a("mo",null,"â‹®")])]),a("mtd",null,[a("mrow",{"data-mjx-texclass":"ORD"},[a("mo",null,"â‹®")])]),a("mtd",null,[a("mo",null,"â‹±")]),a("mtd",null,[a("mrow",{"data-mjx-texclass":"ORD"},[a("mo",null,"â‹®")])])]),a("mtr",null,[a("mtd",null,[a("mn",null,"0")]),a("mtd",null,[a("mn",null,"0")]),a("mtd",null,[a("mo",null,"â‹¯")]),a("mtd",null,[a("mi",null,"B")])])]),a("mo",{"data-mjx-texclass":"CLOSE"},"]")])])],-1))]),s[10]||(s[10]=a("p",null,[e("which occurs as a square root in the discretization of GMRF-based state-space models. "),a("code",null,"N_t"),e(" is the total number of blocks along the rows.")],-1)),i(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[8]||(s[8]=[a("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/57a7c6c1c602e25080c466e0dade2d87e250b1b3/src/linear_maps/ssm_bidiagonal.jl#L6-L29",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),a("details",g,[a("summary",null,[s[11]||(s[11]=a("a",{id:"GaussianMarkovRandomFields.OuterProductMap",href:"#GaussianMarkovRandomFields.OuterProductMap"},[a("span",{class:"jlbinding"},"GaussianMarkovRandomFields.OuterProductMap")],-1)),s[12]||(s[12]=e()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[14]||(s[14]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OuterProductMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Represents the outer product A&#39; Q A, without actually forming it in memory.</p>`,2)),i(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[13]||(s[13]=[a("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/57a7c6c1c602e25080c466e0dade2d87e250b1b3/src/linear_maps/outer_product.jl#L8-L15",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),a("details",Q,[a("summary",null,[s[15]||(s[15]=a("a",{id:"GaussianMarkovRandomFields.LinearMapWithSqrt",href:"#GaussianMarkovRandomFields.LinearMapWithSqrt"},[a("span",{class:"jlbinding"},"GaussianMarkovRandomFields.LinearMapWithSqrt")],-1)),s[16]||(s[16]=e()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[18]||(s[18]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearMapWithSqrt{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A_sqrt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A symmetric positive definite linear map <code>A</code> with known square root <code>A_sqrt</code>, i.e. <code>A = A_sqrt * A_sqrt&#39;</code>. Behaves just like <code>A</code>, but taking the square root directly returns <code>A_sqrt</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>A::LinearMap{T}</code>: The linear map <code>A</code>.</p></li><li><p><code>A_sqrt::LinearMap{T}</code>: The square root of <code>A</code>.</p></li></ul>`,4)),i(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[17]||(s[17]=[a("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/57a7c6c1c602e25080c466e0dade2d87e250b1b3/src/linear_maps/linear_map_with_sqrt.jl#L6-L19",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),a("details",u,[a("summary",null,[s[19]||(s[19]=a("a",{id:"GaussianMarkovRandomFields.CholeskySqrt",href:"#GaussianMarkovRandomFields.CholeskySqrt"},[a("span",{class:"jlbinding"},"GaussianMarkovRandomFields.CholeskySqrt")],-1)),s[20]||(s[20]=e()),i(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[22]||(s[22]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CholeskySqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cho</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Cholesky{T},SparseArrays.CHOLMOD.Factor{T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A linear map representing the square root obtained from a Cholesky factorization, i.e. for <code>A = L * L&#39;</code>, this map represents <code>L</code>.</p><p><strong>Arguments</strong></p><ul><li><code>cho::Union{Cholesky{T},SparseArrays.CHOLMOD.Factor{T}}</code>: The Cholesky factorization of a symmetric positive definite matrix.</li></ul>',4)),i(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[21]||(s[21]=[a("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/57a7c6c1c602e25080c466e0dade2d87e250b1b3/src/linear_maps/cholesky_sqrt.jl#L17-L26",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),a("details",y,[a("summary",null,[s[23]||(s[23]=a("a",{id:"GaussianMarkovRandomFields.CholeskyFactorizedMap",href:"#GaussianMarkovRandomFields.CholeskyFactorizedMap"},[a("span",{class:"jlbinding"},"GaussianMarkovRandomFields.CholeskyFactorizedMap")],-1)),s[24]||(s[24]=e()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[26]||(s[26]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CholeskyFactorizedMap{T,C}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cho</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T,C}</span></span></code></pre></div><p>A linear map represented in terms of its Cholesky factorization, i.e. for <code>A = L * L&#39;</code>, this map represents <code>A</code>.</p><p><strong>Type Parameters</strong></p><ul><li><p><code>T</code>: Element type of the matrix</p></li><li><p><code>C</code>: Type of the Cholesky factorization</p></li></ul><p><strong>Arguments</strong></p><ul><li><code>cho</code>: The Cholesky factorization of a symmetric positive definite matrix. Can be <code>Cholesky</code>, <code>SparseArrays.CHOLMOD.Factor</code>, or <code>LDLFactorization</code>.</li></ul>',6)),i(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[25]||(s[25]=[a("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/57a7c6c1c602e25080c466e0dade2d87e250b1b3/src/linear_maps/cholesky_factorized_map.jl#L9-L22",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),a("details",E,[a("summary",null,[s[27]||(s[27]=a("a",{id:"GaussianMarkovRandomFields.ZeroMap",href:"#GaussianMarkovRandomFields.ZeroMap"},[a("span",{class:"jlbinding"},"GaussianMarkovRandomFields.ZeroMap")],-1)),s[28]||(s[28]=e()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[30]||(s[30]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ZeroMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A linear map that maps all vectors to the zero vector.</p><p><strong>Arguments</strong></p><ul><li><p><code>N::Int</code>: Output dimension</p></li><li><p><code>M::Int</code>: Input dimension</p></li></ul>',4)),i(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[29]||(s[29]=[a("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/57a7c6c1c602e25080c466e0dade2d87e250b1b3/src/linear_maps/zero.jl#L5-L13",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),a("details",b,[a("summary",null,[s[31]||(s[31]=a("a",{id:"GaussianMarkovRandomFields.ADJacobianMap",href:"#GaussianMarkovRandomFields.ADJacobianMap"},[a("span",{class:"jlbinding"},"GaussianMarkovRandomFields.ADJacobianMap")],-1)),s[32]||(s[32]=e()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[34]||(s[34]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ADJacobianMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xâ‚€</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, N_outputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A linear map representing the Jacobian of <code>f</code> at <code>xâ‚€</code>. Uses forward-mode AD in a matrix-free way, i.e. we do not actually store the Jacobian in memory and only compute JVPs.</p><p>Requires ForwardDiff.jl!</p><p><strong>Arguments</strong></p><ul><li><p><code>f::Function</code>: Function to differentiate.</p></li><li><p><code>xâ‚€::AbstractVector{T}</code>: Input vector at which to evaluate the Jacobian.</p></li><li><p><code>N_outputs::Int</code>: Output dimension of <code>f</code>.</p></li></ul>',5)),i(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[33]||(s[33]=[a("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/57a7c6c1c602e25080c466e0dade2d87e250b1b3/src/linear_maps/ad_jacobian.jl#L5-L18",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),a("details",f,[a("summary",null,[s[35]||(s[35]=a("a",{id:"GaussianMarkovRandomFields.ADJacobianAdjointMap",href:"#GaussianMarkovRandomFields.ADJacobianAdjointMap"},[a("span",{class:"jlbinding"},"GaussianMarkovRandomFields.ADJacobianAdjointMap")],-1)),s[36]||(s[36]=e()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[38]||(s[38]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ADJacobianAdjointMap{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, xâ‚€</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, N_outputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A linear map representing the adjoint of the Jacobian of <code>f</code> at <code>xâ‚€</code>. Uses reverse-mode AD in a matrix-free way, i.e. we do not actually store the Jacobian in memory and only compute VJPs.</p><p>Requires Zygote.jl!</p><p><strong>Arguments</strong></p><ul><li><p><code>f::Function</code>: Function to differentiate.</p></li><li><p><code>xâ‚€::AbstractVector{T}</code>: Input vector at which to evaluate the Jacobian.</p></li><li><p><code>N_outputs::Int</code>: Output dimension of <code>f</code>.</p></li></ul>',5)),i(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[37]||(s[37]=[a("a",{href:"https://github.com/timweiland/GaussianMarkovRandomFields.jl/blob/57a7c6c1c602e25080c466e0dade2d87e250b1b3/src/linear_maps/ad_jacobian.jl#L37-L50",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const w=r(h,[["render",M]]);export{x as __pageData,w as default};
